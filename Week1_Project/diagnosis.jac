# Symptom Diagnosis System
import from byllm { Model }
import streamlit as st;
import fpdf;

# Initialize Gemini LLM
glob llm = Model(model_name="gemini/gemini-2.0-flash");

# Helper function to create the PDF content. This is a standard Python function.
def create_pdf(age: int, gender: str, symptoms: str, diagnosis: str, treatment: str) -> bytes {
    # FPDF setup
    pdf = fpdf.FPDF(orientation='P', unit='mm', format='A4');
    pdf.add_page();
    pdf.set_font('Arial', 'B', 16);
    
    # Add Title
    pdf.cell(0, 10, 'Medical Diagnosis Report', 0, 1, 'C');
    pdf.set_font('Arial', '', 12);
    pdf.cell(0, 10, 'Generated by Diagnosis App', 0, 1, 'C');
    pdf.ln(8); # Line break

    # Patient Details
    pdf.set_font('Arial', 'B', 12);
    pdf.set_fill_color(200, 220, 255);
    pdf.cell(0, 7, 'PATIENT DATA', 0, 1, 'L', 1);
    pdf.set_font('Arial', '', 10);
    pdf.cell(0, 5, f'Age: {age}', 0, 1, 'L');
    pdf.cell(0, 5, f'Gender: {gender}', 0, 1, 'L');
    pdf.cell(0, 5, 'Symptoms:', 0, 1, 'L');
    pdf.multi_cell(0, 5, symptoms);
    pdf.ln(5);

    # Diagnosis
    pdf.set_font('Arial', 'B', 12);
    pdf.cell(0, 7, 'DIAGNOSIS', 0, 1, 'L', 1);
    pdf.set_font('Arial', '', 10);
    pdf.multi_cell(0, 5, diagnosis);
    pdf.ln(5);

    # Treatment
    pdf.set_font('Arial', 'B', 12);
    pdf.cell(0, 7, 'TREATMENT RECOMMENDATION', 0, 1, 'L', 1);
    pdf.set_font('Arial', '', 10);
    
    # Ensure treatment text is robustly handled by PDF
    pdf.multi_cell(0, 5, treatment.replace("Disclaimer:", "\n\nDisclaimer:"));
    pdf.ln(5);
    
    # Disclaimer
    pdf.set_font('Arial', 'I', 8);
    pdf.cell(0, 5, 'Disclaimer: This report is not a substitute for professional medical advice.', 0, 1, 'L');

    # Output the PDF as bytes
    # 'S' returns as a string, which we encode to bytes for Streamlit
    return pdf.output(dest='S').encode('latin-1'); 
}

node Patient{}

node Age(Patient){
    has age: int;
    can check with Doctor entry {
        visitor.data["age"] = self.age;
    }
}
node Gender(Patient){
    has gender: str;
    can check with Doctor entry {
        visitor.data["gender"] = self.gender;
    }
}
node Symptoms(Patient){
    has symptoms: str;
    can check with Doctor entry {
        visitor.data["symptoms"] = self.symptoms;
    }
}

node Record{
    can store with Doctor entry {
        visitor.data["diagnosis"] = visitor.create_diagnosis(visitor.data);
        visitor.data["treatment"] = visitor.recommend_treatment(visitor.data);
    }
}

walker Doctor{
    has data: dict = {};
    can start with `root entry {
        visit [-->(`?Patient)];
        visit [-->(`?Record)];
    }

    """You are a medical assistant. Use the following patient data (age, gender, symptoms) to suggest a possible diagnosis."""
    def create_diagnosis(data: dict) -> str by llm();

    """You are a medical assistant. Suggest possible treatment or
    management options for the given patient, based on age, gender,
    symptoms, and diagnosis. Make it clear that this is not a substitute for professional medical care."""
    def recommend_treatment(data: dict) -> str by llm();
}

with entry {
    st.title("Self Diagnosis AppðŸ©º");

    # 1. User Input
    user_age = st.number_input("Enter patient age:", min_value=1, max_value=120, value=1);
    user_gender = st.selectbox("Enter patient gender:", ["", "Male", "Female", "Other"]);
    user_symptoms = st.text_area("Enter symptoms (comma-separated):");

    # 2. Trigger Diagnosis
    if st.button("Get Diagnosis") {

        # Basic validation
        if user_age == 0 or user_gender == "" or user_symptoms.strip() == "" {
            st.error("Please ensure you've entered age, gender, and symptoms.");
        } else {
            # 3. Create nodes and run the walker to get results
            root ++> Age(age=int(user_age));
            root ++> Gender(gender=user_gender);
            root ++> Symptoms(symptoms=user_symptoms);
            root ++> Record();

            # Run the agent
            agent = Doctor() spawn root;
            
            diagnosis_text = agent.data['diagnosis'];
            treatment_text = agent.data['treatment'];

            # 4. Display Results
            st.subheader("Your Results:");
            st.info("**Diagnosis:** " + diagnosis_text);
            st.warning("**Treatment Recommendation:** " + treatment_text);

            # 5. Generate and provide PDF for download
            pdf_bytes = create_pdf(
                int(user_age), 
                user_gender, 
                user_symptoms, 
                diagnosis_text, 
                treatment_text
            );

            st.download_button(
                label="Download Medical Report (PDF)",
                data=pdf_bytes,
                file_name="medical_report.pdf",
                mime="application/pdf"
            );
        }
    }
}